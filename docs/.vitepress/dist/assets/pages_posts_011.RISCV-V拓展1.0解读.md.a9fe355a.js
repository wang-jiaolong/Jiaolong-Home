import{_ as i,D as r,o as s,c as o,z as l,a as e,t as n,G as v,O as d}from"./chunks/framework.89d0ee0c.js";const _=JSON.parse('{"title":"RISCV-V拓展1.0解读","description":"","frontmatter":{"title":"RISCV-V拓展1.0解读","date":"2022-08-31T17:24:12.000Z","img":"https://s2.loli.net/2022/10/26/DFfa4l6Ic2qBA8g.webp"},"headers":[],"relativePath":"pages/posts/011.RISCV-V拓展1.0解读.md","filePath":"pages/posts/011.RISCV-V拓展1.0解读.md"}'),c={name:"pages/posts/011.RISCV-V拓展1.0解读.md"},p={id:"frontmatter-title",tabindex:"-1"},h=l("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }} <Badge type="tip" :text="String($frontmatter.date).slice(0,10)" />"'},"​",-1),g=d('<blockquote><p><a href="https://www.bilibili.com/video/BV1oV411B72i?vd_source=971b4d129503b95f810fff6f2cdd4cb8" target="_blank" rel="noreferrer">RISC-V 向量扩展在Clang/LLVM中的支持 王鹏_哔哩哔哩_bilibili</a></p></blockquote><h2 id="risc-v向量扩展简介" tabindex="-1">RISC-V向量扩展简介 <a class="header-anchor" href="#risc-v向量扩展简介" aria-label="Permalink to &quot;RISC-V向量扩展简介&quot;">​</a></h2><p>RISC-V向量扩展是RISC-V指令集的标准扩展模块之一（简称RVV），它主要位基础指令集添加了向量寄存器和各类向量指令，使得用户可以使用向量化来优化和加速程序代码。</p><p><strong>为什么使用向量</strong></p><ul><li>当存在大量数据可供应用程序同时计算时，我们称之为数据并行性。</li><li>最著名的数据并行架构是单指令多数据（SIMD）</li><li>将SIMD寄存器宽度和SIMD指令数量翻倍的后续演进步骤都让ISA走上了复杂度逐渐提升的道路。</li><li>一个更优雅的利用数据级并行性的方案是采用向量架构。</li></ul><p><strong>向量扩展的特点</strong></p><ul><li>RISC-V不预设向量长度</li><li>具体实现可以自主选择提供多长的向量</li><li>应用程序在运行时自主选择需要的长度</li></ul><h2 id="riscv-v-spec-1-0" tabindex="-1">riscv-v-spec-1.0 <a class="header-anchor" href="#riscv-v-spec-1-0" aria-label="Permalink to &quot;riscv-v-spec-1.0&quot;">​</a></h2><p><a href="https://github.com/riscv/riscv-v-spec/releases" target="_blank" rel="noreferrer">Releases · riscv/riscv-v-spec (github.com)</a></p><p>riscv-v-spec-1.0于2021年9月底发布，是RISC-V V扩展的第一个稳定版本，之后的所有修改将保持兼容性，可以在此基础上开始开发工具链、功能模拟器和实现，以及使用该指令集的软件。</p><h2 id="约定" tabindex="-1">约定 <a class="header-anchor" href="#约定" aria-label="Permalink to &quot;约定&quot;">​</a></h2><p>RV-V提供两种类型的寄存器：数据寄存器和控制与状态寄存器（CSR），以及三种类型的指令：配置设置、内存访问和算术运算指令。RV-V定义了32个向量（数据）寄存器，命名为v0-v31，每个寄存器都有一个根据架构设定实现所定义的固定的数据长度表示为VLEN。此外增加了 7 个非特权 CSRs，其中有两个重要的CSR寄存器，即vtype和vl。vtype寄存器的长度和架构地址空间长度保持一致，主要用于设置向量寄存器文件内容的默认组成，包括向量寄存器中元素的组织以及向量寄存器的组合情况。vl寄存器的长度同样和地址空间长度保持一致，vl寄存器存取了一个整数值，用来决定向量计算的有效长度。vtype和vl寄存器都是通过使用vsetvli指令进行更新设置。</p><ul><li><strong>ELEN</strong>：element-length，内部能够处理的一个向量元素的最大 bit 数目，要求大于 8 且是 2 的整数次幂。</li><li><strong>VLEN</strong>：vector-length，一个向量寄存器的总 bit 数（宽度），显然 VLEN 应该大于等于 ELEN，也是 2 的整数次幂。risc-v sprc 要求 VLEN 小于 2^16</li></ul><h2 id="vector-registers" tabindex="-1">Vector Registers <a class="header-anchor" href="#vector-registers" aria-label="Permalink to &quot;Vector Registers&quot;">​</a></h2><p>Risc-v Vector 拓展固定增加 32 个向量寄存器（所有实现都应该是 32 个，每个寄存器宽度为 VLEN bit），同时增加了 7 个非特权 CSRs</p><table><thead><tr><th>name</th><th style="text-align:left;">类型</th><th>description</th></tr></thead><tbody><tr><td>vstart</td><td style="text-align:left;">RW</td><td>一条向量指令索要执行的第一个元素的索引，通常被用来记录发生 trap 时恢复的位置，其他用途见下文。任意一条向量指令执行时，vstart 之前的向量将被忽略，该条向量执行结束后 vstart 被置 0，所有向量指令包括 vset{i}vl{i} 执行结束后都会把该寄存器置零</td></tr><tr><td>vxsat</td><td style="text-align:left;">RW</td><td>定点饱和（saturate）标志</td></tr><tr><td>vxrm</td><td style="text-align:left;">RW</td><td>定点数四舍五入模式</td></tr><tr><td>vcsr</td><td style="text-align:left;"></td><td>向量控制和状态寄存器，实际是 vxsat 和 vcsr 的镜像</td></tr><tr><td><strong>vl</strong></td><td style="text-align:left;">RO</td><td>实际执行的向量长度 ，只能在一条 vset{i}vl{i} 指令执行后自动更新</td></tr><tr><td><strong>vtype</strong></td><td style="text-align:left;">RO</td><td>向量数据类型，用于说明向量元素的类型。这个寄存器很特殊，只能在一条 vset{i}vl{i} 指令执行后自动更新，而其标识了向量的实际宽度、组织方式、mask 处理策略、tail 处理策略等多种信息</td></tr><tr><td>vlenb</td><td style="text-align:left;">RO</td><td>VLEN/8</td></tr></tbody></table><h3 id="vtype" tabindex="-1">vtype <a class="header-anchor" href="#vtype" aria-label="Permalink to &quot;vtype&quot;">​</a></h3><p><img src="https://s2.loli.net/2022/10/26/kGFg3s8r2P5SC4o.webp" alt="202210231150059"></p><h4 id="vma-和-vta" tabindex="-1">vma 和 vta <a class="header-anchor" href="#vma-和-vta" aria-label="Permalink to &quot;vma 和 vta&quot;">​</a></h4><p>vta 用于指示 “tail elements” 的填充方法，vma 用于指示被 mask 元素的填充方法。分别用于在向量指令执行期间决定尾部元素和目标非活跃元素的行为。这两个参数在可以配置 vtype 的汇编指令 vset{i}vl{i} 中以特定符号标识。</p><ul><li>undisturbed：量寄存器组的相应目标元素将保留原值不变。</li><li>agnostic：目标操作数元素既可以保留原值也可以全部置1。</li></ul><blockquote><p>在有些处理器中，会采用寄存器重命名的技术，比如超标量流水线处理器，在undisturbed策略下，必须从旧的物理目标向量寄存器中读取元素值，才能复制到新的物理目标寄存器中；也可以说，在新的物理寄存器进行重命名时，需要根据重命名映射表，查到原有的映射关系，然后把其中的元素值读出来，写到重命名后的对应元素。这对于不需要这些非活跃元素和尾部元素值的之后的运算既降低了性能也增加了功耗。因此undisturbed策略就显得很不可观，此时按照agnostic策略进行运算比较好。</p></blockquote><blockquote><p>在v0.9之前，当这些标志没有在vsetvli上指定时，它们默认为掩码不受干扰/尾不受干扰。但是，不建议使用不带这些标志的vsetvli，现在必须指定标志设置。默认情况下可能应该是尾部不可知论/掩码不可知论，因此软件必须指定何时关心非参与元素，但考虑到引入这些标志之前指令的历史意义，决定在未来的汇编代码中总是需要它们。</p></blockquote><p><img src="https://cdn.staticaly.com/gh/wang-jiaolong/PicX_Repo@master/images/image.1t4qmoqj7oww.webp" alt="image"></p><h4 id="vill" tabindex="-1">vill <a class="header-anchor" href="#vill" aria-label="Permalink to &quot;vill&quot;">​</a></h4><p>vill 位反映上一条的 vset{i}vl{i} 指令是不是合法的如果 vill 被置位了，后面再执行向量指令就会引起异常。</p><h4 id="vsew" tabindex="-1">vsew <a class="header-anchor" href="#vsew" aria-label="Permalink to &quot;vsew&quot;">​</a></h4><p>vsew 标识了向量处理的动态选择的元素宽度（<strong>SEW</strong>（selected element width）），这是 RISCV vector 提供的能力，SEW 反应实际元素的宽度，不受 ELEN 制约。当前版本 spec 中 SEW 可取 8、16、32、64，对应的 vsew 为 000、001、010、011。可以取更大的 SEW，但目前 spec 中并不统一规定。正常情况下，SEW 似乎不应该大于 ELEN，但实际上通过后面的 LMUL 参数，riscv-v 允许多个向量元素组合成一个更大的元素，由此产生大于 ELEN 的 SEW。VLEN/SEW 反映了一个向量寄存器中实际的元素个数。</p><h4 id="vlmul-2-0" tabindex="-1">vlmul[2:0] <a class="header-anchor" href="#vlmul-2-0" aria-label="Permalink to &quot;vlmul[2:0]&quot;">​</a></h4><p>vlmul[2:0] 记录了一个重要参数：LMUL，这是一个（可能）包含分数的参数，代表 vector 提供的重要能力：将多个向量打包成组，使得一条向量指令可以在多个向量寄存器上操作。当 LMUL 等于 1 时，这是标准的向量处理模式。当 LMUL 大于 1 时，代表将多个向量寄存器打包成一个。LMUL 也可以是一个小于 1 的分数，这种情况下将会缩减一个向量寄存器内的元素个数，只用其低位的部分LMUL 同时引入了一个新的参数：VLMAX= LMUL * VLEN / SEW，即融合后的可执行的最长向量长度，这是一条向量指令应当能执行到的元素数量。</p><p><img src="https://cdn.staticaly.com/gh/wang-jiaolong/PicX_Repo@master/images/image.1gtr082alg0w.webp" alt="image"></p><h2 id="vset-i-vl-i-指令" tabindex="-1">vset{i}vl{i} 指令 <a class="header-anchor" href="#vset-i-vl-i-指令" aria-label="Permalink to &quot;vset{i}vl{i} 指令&quot;">​</a></h2><p>risc-v v 扩展没有直接设置 vl、vtype 的指令，而是使用了一个带有返回值的 vset{i}vl{i} 指令。vset{i}vl{i} 指令在 riscv 向量体系中发挥了重要作用，其通过与实际硬件、其它向量指令的密切配合，实现了自动化排布向量元素、处理向量长度，最终达成处理迭代循环（stripmining）的目的。</p><p><img src="https://cdn.staticaly.com/gh/wang-jiaolong/PicX_Repo@master/images/image.3p4jz445fmm0.webp" alt="image"></p><p>共有三种类型的 vset 指令，其功能很多，包括：</p><ul><li>根据输入的 vtype 和 VAL 信息，生成一个符合要求的 vl（向量长度），更新 CSRs 中的 vl</li><li>同时将 vl 输出到 rd 寄存器</li><li>根据输入的 vtype 更新 CSRs 中的 SEW、LMUL 等信息</li></ul><h2 id="设置vl" tabindex="-1">设置vl <a class="header-anchor" href="#设置vl" aria-label="Permalink to &quot;设置vl&quot;">​</a></h2><p>vl 是当前向量指令处理的长度，是保存在 CSRs 中的一个值，具有重要意义。 VAL 是控制 vl 生成的主要单元：</p><ul><li>当 AVL 字段指向一个非 x0 的寄存器或立即数时，vl 根据 VAL 的值更新。</li><li>而当 VAL 指向 x0 且 rd 不指向 x0 时，vl 更新为 VLMAX = LMUL*VLEN/SEW</li><li>当 VAL 指向 x0 且 rd 不指向 x0 时，vl 不更新（但此时可以单独设置 vtype，但不可以改变 SEW/LMUL，否则报错）</li></ul><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><h2 id="附录1" tabindex="-1">附录1： <a class="header-anchor" href="#附录1" aria-label="Permalink to &quot;附录1：&quot;">​</a></h2><p><strong>名词</strong></p><ul><li><p>ELEN：element-length，内部能够处理的一个向量元素的最大 bit 数目，要求大于 8 且是 2 的整数次幂。</p></li><li><p>VLEN：vector-length，一个向量寄存器的总 bit 数（宽度），显然 VLEN 应该大于等于 ELEN，也是 2 的整数次幂。risc-v sprc 要求 VLEN 小于 2^16</p></li><li><p>SEW：反应实际元素的宽度，不受 ELEN 制约。</p></li><li><p>LMUL：将多个向量打包成组，使得一条向量指令可以在多个向量寄存器上操作。（可能）包含分数的参数，代表 vector 提供的重要能力。</p></li></ul><p><strong>寄存器</strong></p><ul><li>rd：目的操作数寄存器，用来存放操作结果。</li><li>vtype：向量数据类型，用于说明向量元素的类型。这个寄存器很特殊，只能在一条 vset{i}vl{i} 指令执行后自动更新，而其标识了向量的实际宽度、组织方式、mask 处理策略、tail 处理策略等多种信息</li><li>vl：实际执行的向量长度 ，只能在一条 vset{i}vl{i} 指令执行后自动更新</li></ul><hr><p>参考链接：</p><ol><li><p><a href="https://blog.csdn.net/a675619772/article/details/121952007" target="_blank" rel="noreferrer">risc-v vector扩展1.0版本解读（riscv-v-spec-1.0）__hellc的博客-CSDN博客</a></p></li><li><p><a href="https://blog.csdn.net/qq_43954212/article/details/126576486" target="_blank" rel="noreferrer">RISC-V向量指令扩展（二）_Sy_Goding的博客-CSDN博客</a></p></li><li><p><a href="https://kns.cnki.net/KCMS/detail/detail.aspx?dbname=CMFDTEMP&amp;filename=1021909427.nh" target="_blank" rel="noreferrer">彭平.(2021).面向RISC-V向量指令的计算机视觉算法的移植与评测(硕士学位论文,华中科技大学)</a></p></li></ol>',48);function m(t,b,u,V,f,L){const a=r("Badge");return s(),o("div",null,[l("h1",p,[e(n(t.$frontmatter.title)+" ",1),v(a,{type:"tip",text:String(t.$frontmatter.date).slice(0,10)},null,8,["text"]),e(),h]),g])}const E=i(c,[["render",m]]);export{_ as __pageData,E as default};
