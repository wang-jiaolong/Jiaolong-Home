import{_ as e,D as p,o as t,c as o,z as n,a,t as i,G as c,O as r}from"./chunks/framework.89d0ee0c.js";const D=JSON.parse('{"title":"RISC-V V扩展1.0版本环境搭建与测试","description":"","frontmatter":{"title":"RISC-V V扩展1.0版本环境搭建与测试","date":"2022-08-11T10:02:51.000Z","img":"https://s2.loli.net/2022/08/29/tBqQsLhgHPE5IZO.png"},"headers":[],"relativePath":"pages/posts/006.RISC-V-V拓展环境搭建与测试.md","filePath":"pages/posts/006.RISC-V-V拓展环境搭建与测试.md"}'),d={name:"pages/posts/006.RISC-V-V拓展环境搭建与测试.md"},C={id:"frontmatter-title",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }} <Badge type="tip" :text="String($frontmatter.date).slice(0,10)" />"'},"​",-1),u=r(`<h2 id="_0-准备" tabindex="-1">0. 准备 <a class="header-anchor" href="#_0-准备" aria-label="Permalink to &quot;0. 准备&quot;">​</a></h2><blockquote><p>在重装了n次后踩的坑</p></blockquote><ul><li>虚拟机：Ubuntu 20.04</li><li>内存分配：建议16G+ （或通过分配swap解决）</li><li>硬盘分配：建议100G+</li></ul><h2 id="_1-下载相关依赖" tabindex="-1">1. 下载相关依赖 <a class="header-anchor" href="#_1-下载相关依赖" aria-label="Permalink to &quot;1. 下载相关依赖&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">apt-get install autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev</span></span></code></pre></div><h2 id="_2-下载安装工具链" tabindex="-1">2. 下载安装工具链 <a class="header-anchor" href="#_2-下载安装工具链" aria-label="Permalink to &quot;2. 下载安装工具链&quot;">​</a></h2><p><strong>下载<code>riscv-gnu-toolchain</code></strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git clone -b rvv-next https://github.com/riscv/riscv-gnu-toolchain --progress</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cd riscv-gnu-toolchain</span></span></code></pre></div><p>这个仓库使用子模块，将自动在需要的时候加载，所以并不需要 <code>--recursive</code> or <code>git submodule update --init --recursive</code> 来一次性下完。</p><p>下载riscv-gcc</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git submodule update --init --progress  --remote riscv-gcc</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cd riscv-gcc</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git fetch origin</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout origin/riscv-gcc-10.1-rvv-dev</span></span></code></pre></div><p>下载riscv-gcc</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git submodule update --init --progress  --remote riscv-binutils</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cd ../riscv-binutils</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git fetch origin</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout origin/rvv-1.0.x-zfh</span></span></code></pre></div><p><strong>安装</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cd riscv-gnu-toolchain</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">./configure --prefix=/opt/riscv --with-arch=rv64gcv --with-abi=lp64d --with-multilib-generator=&quot;rv64gcv-lp64d--&quot;</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">make -j $(nproc) &gt;make.log 2&gt;&amp;1</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">make linux -j $(nproc) &gt;make_linux.log 2&gt;&amp;1</span></span></code></pre></div><blockquote><p>如果make -j $(nproc) 失败，试试执行make -j 1</p></blockquote><blockquote><p>分配空间不足会提示<code>g++: fatal error: Killed signal terminated program cc1plus</code>错误</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这一步本人耗时<strong>6-7</strong>小时，给出本人电脑配置，方便参考时间</p><blockquote><p>处理器：Intel(R) Core(TM) i5-8300H CPU @ 2.30GHz</p><p>内存：16G</p><p>显卡：GTX 1060 （好像没用到）</p></blockquote><p>中途可能会在部分环节假死好久甚至一两个小时，不用管它，可以用<code>free -h</code>产看内存占用情况</p></div><p><strong>设置环境变量</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vim ~/.bashrc</span></span></code></pre></div><p>添加如下路径</p><blockquote><p>记得修改为对应路径</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export RISCV=&quot;/opt/riscv&quot; </span></span>
<span class="line"><span style="color:#A6ACCD;">export PATH=$PATH:$RISCV/bin</span></span></code></pre></div><p>使环境变量生效</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">source ~/.bashrc</span></span></code></pre></div><h2 id="_3-安装-spike-和-pk" tabindex="-1">3. 安装 Spike 和 pk <a class="header-anchor" href="#_3-安装-spike-和-pk" aria-label="Permalink to &quot;3. 安装 Spike 和 pk&quot;">​</a></h2><p>在<code>spike</code>路径下打开终端：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">apt-get install device-tree-compiler</span></span>
<span class="line"><span style="color:#A6ACCD;">mkdir build</span></span>
<span class="line"><span style="color:#A6ACCD;">cd build</span></span>
<span class="line"><span style="color:#A6ACCD;">../configure --prefix=$RISCV</span></span>
<span class="line"><span style="color:#A6ACCD;">make</span></span>
<span class="line"><span style="color:#A6ACCD;">[sudo] make install</span></span></code></pre></div><p>在<code>pk</code>路径下打开终端：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">mkdir build</span></span>
<span class="line"><span style="color:#A6ACCD;">cd build</span></span>
<span class="line"><span style="color:#A6ACCD;">../configure --prefix=$RISCV --host=riscv64-unknown-elf</span></span>
<span class="line"><span style="color:#A6ACCD;">make</span></span>
<span class="line"><span style="color:#A6ACCD;">make install</span></span></code></pre></div><h2 id="_4-测试编译" tabindex="-1">4. 测试编译 <a class="header-anchor" href="#_4-测试编译" aria-label="Permalink to &quot;4. 测试编译&quot;">​</a></h2><ol><li><p>编写简单测试函数add.c</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">#include &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">int f(int x){</span></span>
<span class="line"><span style="color:#A6ACCD;">        return x+3;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">int main(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        printf(&quot;hello riscv\\n&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        printf(&quot;%d\\n&quot;,f(3));</span></span>
<span class="line"><span style="color:#A6ACCD;">}&#39; &gt; add.c</span></span></code></pre></div></li><li><p>使用<code>riscv64-unknown-elf-gcc</code>编译RISC-V可执行文件</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">riscv64-unknown-elf-gcc add.c -o add</span></span></code></pre></div></li><li><p>使用<code>spike pk</code>模拟运行RISC-V指令</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">spike pk add</span></span></code></pre></div><p><img src="https://s2.loli.net/2022/08/08/fiYagDkSnqdKC4j.png" alt="image-20220808135230132"></p></li><li><p>使用<code>riscv64-unknown-elf-gcc</code>生成RISC-V指令的汇编代码</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">riscv64-unknown-elf-gcc -S add.c -o add.s</span></span></code></pre></div><p><img src="https://s2.loli.net/2022/08/08/U2JCnFPyphV145b.png" alt="image-20220808135205903"></p></li></ol><h2 id="_5-测试向量指令" tabindex="-1">5. 测试向量指令 <a class="header-anchor" href="#_5-测试向量指令" aria-label="Permalink to &quot;5. 测试向量指令&quot;">​</a></h2><ol><li><p>新建汇编代码<code>v_test.s</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#void</span></span>
<span class="line"><span style="color:#A6ACCD;">#saxpy(size_t n, const float a, const float *x, float *y)</span></span>
<span class="line"><span style="color:#A6ACCD;"># {</span></span>
<span class="line"><span style="color:#A6ACCD;">#       size_t i;</span></span>
<span class="line"><span style="color:#A6ACCD;">#       for (i=0; i&lt;n; i++)  y[i] = a * x[i] + y[i];</span></span>
<span class="line"><span style="color:#A6ACCD;"># }</span></span>
<span class="line"><span style="color:#A6ACCD;">#  register arguments:</span></span>
<span class="line"><span style="color:#A6ACCD;">#      a0      n</span></span>
<span class="line"><span style="color:#A6ACCD;">#      fa0     a</span></span>
<span class="line"><span style="color:#A6ACCD;">#      a1      x</span></span>
<span class="line"><span style="color:#A6ACCD;">#      a2      y</span></span>
<span class="line"><span style="color:#A6ACCD;">.global saxpy</span></span>
<span class="line"><span style="color:#A6ACCD;">saxpy:</span></span>
<span class="line"><span style="color:#A6ACCD;">        vsetvli a4, a0, e32, m8,ta,ma</span></span>
<span class="line"><span style="color:#A6ACCD;">        vle32.v v0, (a1)</span></span>
<span class="line"><span style="color:#A6ACCD;">        sub a0, a0, a4</span></span>
<span class="line"><span style="color:#A6ACCD;">        slli a4, a4, 2</span></span>
<span class="line"><span style="color:#A6ACCD;">        add a1, a1, a4</span></span>
<span class="line"><span style="color:#A6ACCD;">        vle32.v v8, (a2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        vfmacc.vf v8, fa0, v0</span></span>
<span class="line"><span style="color:#A6ACCD;">        vse32.v v8, (a2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        add a2, a2, a4</span></span>
<span class="line"><span style="color:#A6ACCD;">        bnez a0, saxpy</span></span>
<span class="line"><span style="color:#A6ACCD;">        ret</span></span></code></pre></div></li><li><p>编译</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">riscv64-unknown-elf-as -march=rv64gcv --mabi=lp64d v_test.s -o v_test.o</span></span></code></pre></div></li><li><p>新建c文件<code>callsaxpy.c</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#include &lt;stddef.h&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">#include &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">extern void  saxpy(size_t n, const float a, const float *x, float *y);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">int main(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        size_t size=3;</span></span>
<span class="line"><span style="color:#A6ACCD;">        const float a=1.0;</span></span>
<span class="line"><span style="color:#A6ACCD;">        const float array1[]={1.0,2.0,3.0};</span></span>
<span class="line"><span style="color:#A6ACCD;">        float array2[]={1.0,2.0,3.0};</span></span>
<span class="line"><span style="color:#A6ACCD;">        for(int i =0;i&lt;size;i++){</span></span>
<span class="line"><span style="color:#A6ACCD;">                printf(&quot;%f\\n&quot;, array2[i]);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        printf(&quot;----------------\\n&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //调用saxpy函数</span></span>
<span class="line"><span style="color:#A6ACCD;">        saxpy(size,a,array1,array2);</span></span>
<span class="line"><span style="color:#A6ACCD;">        for(int i =0;i&lt;size;i++){</span></span>
<span class="line"><span style="color:#A6ACCD;">                printf(&quot;%f\\n&quot;, array2[i]);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        return 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></li><li><p>编译</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">riscv64-unknown-elf-gcc -c callsaxpy.c -o callsaxpy.o</span></span></code></pre></div></li><li><p>生成可执行文件</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">riscv64-unknown-elf-gcc -static v_test.o callsaxpy.o -o out</span></span></code></pre></div></li></ol><blockquote><p>或者跳过245直接执行</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">riscv64-unknown-elf-gcc -g v_test.s callsaxpy.c -o out</span></span></code></pre></div></blockquote><ol start="6"><li><p>运行</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">spike --isa=RV64GCV pk out</span></span></code></pre></div></li></ol><p><img src="https://s2.loli.net/2022/08/15/yJAN8lKWZUSCInL.png" alt="image-20220815112928349"></p><h2 id="_5-qemu" tabindex="-1">5. qemu <a class="header-anchor" href="#_5-qemu" aria-label="Permalink to &quot;5. qemu&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">wget https://download.qemu.org/qemu-7.1.0.tar.bz2</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tar -jxvf qemu-7.1.0.tar.bz2</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">./configure --target-list=riscv64-softmmu,riscv64-linux-user --prefix=/home/jiaolong/riscvv/qemu</span></span></code></pre></div><p>报错：ERROR: glib-2.56 gthread-2.0 is required to compile QEMU</p><p>目前尝试两种解决办法：</p><ol><li>使用Ubuntu18.04</li><li>手动下载glib</li></ol><h3 id="ubuntu18-04" tabindex="-1">Ubuntu18.04 <a class="header-anchor" href="#ubuntu18-04" aria-label="Permalink to &quot;Ubuntu18.04&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">wget https://download.qemu.org/qemu-7.1.0.tar.bz2</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tar -jxvf qemu-7.1.0.tar.bz2</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">./configure --target-list=riscv64-linux-user,riscv64-softmmu --prefix=/usr/local/qemu</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">apt-get install libglib2.0-dev</span></span>
<span class="line"><span style="color:#A6ACCD;">apt-get install libpixman-1-dev</span></span></code></pre></div><p>如果想支持rvv则：加上<code>-cpu rv64,v=true</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">./qemu-riscv64 -cpu rv64,v=true -L $RISCV/sysroot ../../../test/out</span></span></code></pre></div><h3 id="手动编译" tabindex="-1">手动编译 <a class="header-anchor" href="#手动编译" aria-label="Permalink to &quot;手动编译&quot;">​</a></h3><p>在尝试apt-get install 安装失败后，使用手动编译</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">wget http://ftp.acc.umu.se/pub/GNOME/sources/glib/2.56/glib-2.56.4.tar.xz</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tar -vxf glib-2.56.4.tar.xz</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">./configure</span></span></code></pre></div><p>再次报错：No package &#39;libffi&#39; found</p><p>继续下载</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">wget https://github.com/libffi/libffi/releases/download/v3.4.2/libffi-3.4.2.tar.gz</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tar -vxf libffi-3.4.2.tar.gz</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">./configure --prefix=/usr/local/libffi</span></span>
<span class="line"><span style="color:#A6ACCD;">make</span></span>
<span class="line"><span style="color:#A6ACCD;">make install</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export LIBFFI_LIBS=/usr/local/libffi/lib/libffi.la</span></span>
<span class="line"><span style="color:#A6ACCD;">export PKG_CONFIG_PATH=/usr/local/libffi/lib/pkgconfig</span></span></code></pre></div><p>再次报错：configure: error: *** Could not find libmount</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">wget http://ftp.ntu.edu.tw/pub/linux/utils/util-linux/v2.38/util-linux-2.38.tar.gz</span></span></code></pre></div><p>尝试了一下，搞不定，直接禁用掉<code>--enable-libmount=no</code></p><p>No package &#39;libpcre&#39; found</p><p><a href="https://sourceforge.net/projects/pcre/" target="_blank" rel="noreferrer">PCRE download | SourceForge.net</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">./configure --prefix=/usr/local/pcre --enable-unicode-properties</span></span>
<span class="line"><span style="color:#A6ACCD;">make</span></span>
<span class="line"><span style="color:#A6ACCD;">make install</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/pcre/lib/pkgconfig</span></span></code></pre></div><p><code>--enable-unicode-properties</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">qemu-system-riscv64 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -nographic \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -machine virt \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -smp 4 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -m 2G \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -kernel Fedora-Minimal-Rawhide-*-fw_payload-uboot-qemu-virt-smode.elf \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -bios none \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -object rng-random,filename=/dev/urandom,id=rng0 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -device virtio-rng-device,rng=rng0 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -device virtio-blk-device,drive=hd0 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -drive file=Fedora-Minimal-Rawhide-20200108.n.0-sda.raw,format=raw,id=hd0 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -device virtio-net-device,netdev=usernet \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -netdev user,id=usernet,hostfwd=tcp::10000-:22 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -fsdev local,security_model=passthrough,id=fsdev0,path=/home/jiaolong/riscvv/hostshare \\</span></span>
<span class="line"><span style="color:#A6ACCD;">   -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare</span></span></code></pre></div><h2 id="报错记录" tabindex="-1">报错记录 <a class="header-anchor" href="#报错记录" aria-label="Permalink to &quot;报错记录&quot;">​</a></h2><h3 id="_1-g-fatal-error-killed-signal-terminated-program-cc1plus" tabindex="-1">1. <code>g++: fatal error: Killed signal terminated program cc1plus</code> <a class="header-anchor" href="#_1-g-fatal-error-killed-signal-terminated-program-cc1plus" aria-label="Permalink to &quot;1. \`g++: fatal error: Killed signal terminated program cc1plus\`&quot;">​</a></h3><br><hr><br><p>参考链接：</p><ol><li><a href="https://blog.csdn.net/weixin_51346280/article/details/120572479" target="_blank" rel="noreferrer">RISC-V “V” 拓展—1.0版本环境搭建与测试_riscv_life的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/shensen0304/article/details/95504258" target="_blank" rel="noreferrer">Ubuntu16.04搭建RISCV环境手把手教程（RISCV+spike+gem5+qemu）-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_44796670/article/details/121234446" target="_blank" rel="noreferrer">C++: fatal error: Killed signal terminated program cc1plus_tiffiny10的博客-CSDN博客</a></li></ol>`,88);function h(s,A,y,m,b,v){const l=p("Badge");return t(),o("div",null,[n("h1",C,[a(i(s.$frontmatter.title)+" ",1),c(l,{type:"tip",text:String(s.$frontmatter.date).slice(0,10)},null,8,["text"]),a(),g]),u])}const k=e(d,[["render",h]]);export{D as __pageData,k as default};
