import{_ as i,D as o,o as r,c as s,z as a,a as e,t as n,G as d,O as v}from"./chunks/framework.89d0ee0c.js";const L=JSON.parse('{"title":"RISC-V Vector Extension 1.0 翻译","description":"","frontmatter":{"title":"RISC-V Vector Extension 1.0 翻译","date":"2022-09-01T19:44:18.000Z","img":"https://s2.loli.net/2022/10/26/DFfa4l6Ic2qBA8g.webp"},"headers":[],"relativePath":"pages/posts/010.RISC-V V拓展1.0文档翻译.md","filePath":"pages/posts/010.RISC-V V拓展1.0文档翻译.md"}'),c={name:"pages/posts/010.RISC-V V拓展1.0文档翻译.md"},p={id:"frontmatter-title",tabindex:"-1"},h=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }} <Badge type="tip" :text="String($frontmatter.date).slice(0,10)" />"'},"​",-1),u=v('<blockquote><p>本文翻译自官方文档：<a href="https://github.com/riscv/riscv-v-spec/releases/download/v1.0/riscv-v-spec-1.0.pdf" target="_blank" rel="noreferrer">riscv-v-spec-1.0.pdf</a> ，只翻译了部分内容，能力有限，如有错误还请指正。</p></blockquote><h2 id="_1-介绍" tabindex="-1">1. 介绍 <a class="header-anchor" href="#_1-介绍" aria-label="Permalink to &quot;1. 介绍&quot;">​</a></h2><p>本文档是RISC-V矢量扩展的1.0版本，供公众审阅。</p><blockquote><p>作为RISC-V国际批准程序的一部分，1.0版本被视为冻结供公众审议。1.0版本被认为是足够稳定的，可以开始开发工具链、功能模拟器和实现，包括在上游软件项目中，除非在批准过程中发现严重问题，否则预计不会有不兼容的更改。一旦批准，该规范将发布2.0版本。</p></blockquote><p>本规范包含了当前冻结的矢量指令的完整集合。在开发过程中考虑过但未在本文件中出现的其他指示不包括在审查和批准过程中，并可能完全修订或放弃。[标准向量扩展](#18. Standard Vector Extensions)部分列出了标准向量扩展，以及每个扩展支持哪些指令和元素宽度。</p><h2 id="_2-编译器的参数" tabindex="-1">2. 编译器的参数 <a class="header-anchor" href="#_2-编译器的参数" aria-label="Permalink to &quot;2. 编译器的参数&quot;">​</a></h2><p>每个支持矢量扩展的部分都定义了两个参数:</p><ul><li>ELEN：element-length，内部能够处理的一个向量元素的最大 bit 数目，要求大于 8 且是 2 的整数次幂。</li><li>VLEN：vector-length，一个向量寄存器的总 bit 数（宽度），显然 VLEN 应该大于等于 ELEN，也是 2 的整数次幂。risc-v sprc 要求 VLEN 小于 2^16</li></ul><h2 id="_3-向量拓展的编程模型" tabindex="-1">3. 向量拓展的编程模型 <a class="header-anchor" href="#_3-向量拓展的编程模型" aria-label="Permalink to &quot;3. 向量拓展的编程模型&quot;">​</a></h2><p>向量拓展在标量RISC-V ISA的基础上增加 了32 个向量寄存器，同时增加了 7 个非特权 CSRs (vstart, vxsat, vxrm, vcsr, vtype, vl,vlenb)。</p><table><thead><tr><th>Address</th><th>Privilege</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>0x008</td><td>URW</td><td>vstart</td><td>一条向量指令索要执行的第一个元素的索引</td></tr><tr><td>0x009</td><td>URW</td><td>vxsat</td><td>定点饱和（saturate）标志</td></tr><tr><td>0x00A</td><td>URW</td><td>vxrm</td><td>定点数四舍五入模式</td></tr><tr><td>0x00F</td><td>URW</td><td>vcsr</td><td>向量控制和状态寄存器</td></tr><tr><td>0xC20</td><td>URO</td><td>vl</td><td>向量长度</td></tr><tr><td>0xC21</td><td>URO</td><td>vtype</td><td>向量数据类型</td></tr><tr><td>0xC22</td><td>URO</td><td>vlenb</td><td>VLEN/8 (向量寄存器的字节长度)</td></tr></tbody></table><h3 id="_3-1-向量寄存器" tabindex="-1">3.1 向量寄存器 <a class="header-anchor" href="#_3-1-向量寄存器" aria-label="Permalink to &quot;3.1 向量寄存器&quot;">​</a></h3><p>向量拓展向标量RISC-V ISA添加了32个体系结构向量寄存器v0-v31。每个矢量寄存器都有一个固定的VLEN位。</p><h3 id="_3-2-vector-context-status-in-mstatus" tabindex="-1">3.2 Vector Context Status in mstatus <a class="header-anchor" href="#_3-2-vector-context-status-in-mstatus" aria-label="Permalink to &quot;3.2 Vector Context Status in mstatus&quot;">​</a></h3><h3 id="_3-3-vector-context-status-in-vsstatus" tabindex="-1">3.3. Vector Context Status in vsstatus <a class="header-anchor" href="#_3-3-vector-context-status-in-vsstatus" aria-label="Permalink to &quot;3.3. Vector Context Status in vsstatus&quot;">​</a></h3><h3 id="_3-4-向量类型寄存器-vtype" tabindex="-1">3.4. 向量类型寄存器, vtype <a class="header-anchor" href="#_3-4-向量类型寄存器-vtype" aria-label="Permalink to &quot;3.4. 向量类型寄存器, vtype&quot;">​</a></h3><p><img src="https://s2.loli.net/2022/10/26/6zfTl4EINmJvkdR.webp" alt="image.2cxiqrn0tk2s"></p><p><img src="https://s2.loli.net/2022/10/26/DFfa4l6Ic2qBA8g.webp" alt="image.x8gagcaeqfk"></p><h4 id="_3-4-1-向量宽度-vsew-2-0" tabindex="-1">3.4.1. 向量宽度 vsew[2:0] <a class="header-anchor" href="#_3-4-1-向量宽度-vsew-2-0" aria-label="Permalink to &quot;3.4.1. 向量宽度 vsew[2:0]&quot;">​</a></h4><p>vsew中的值设置动态选择的元素宽度(SEW)。默认情况下，向量寄存器被视为被划分为VLEN/SEW元素。</p><h4 id="_3-4-2-组合向量寄存器-vlmul-2-0" tabindex="-1">3.4.2. 组合向量寄存器 vlmul[2:0] <a class="header-anchor" href="#_3-4-2-组合向量寄存器-vlmul-2-0" aria-label="Permalink to &quot;3.4.2. 组合向量寄存器 vlmul[2:0]&quot;">​</a></h4><p>多个向量寄存器可以组合在一起，这样一个向量指令就可以在多个向量寄存器上操作。这里使用术语向量寄存器组来指用作向量指令的单个操作数的一个或多个向量寄存器。向量寄存器组可用于为较长的应用程序向量提供更高的执行效率，但包含它们的主要原因是允许使用与单宽度元素相同的向量长度操作双宽度或更大的元素。当向量长度乘法器LMUL大于1时，表示组合成向量寄存器组的向量寄存器的默认数量。实现必须支持LMUL整数1、2、4和8。</p><p>LMUL 也可以是一个小于 1 的分数，这种情况下将会缩减一个向量寄存器内的元素个数，只用其低位的部分LMUL 同时引入了一个新的参数：VLMAX= LMUL * VLEN / SEW，即融合后的可执行的最长向量长度，这是一条向量指令应当能执行到的元素数量。</p><p>LMUL的设置有两个目的：</p><ol><li>为更长的应用向量处理器提供潜在的提高执行效率的可能性</li><li>在不改变向量长度的情况下，利用更多的向量寄存器，支持处理更宽的元素</li></ol><h4 id="_3-4-3-vector-tail-agnostic-and-vector-mask-agnostic-vta-and-vma" tabindex="-1">3.4.3. Vector Tail Agnostic and Vector Mask Agnostic vta and vma <a class="header-anchor" href="#_3-4-3-vector-tail-agnostic-and-vector-mask-agnostic-vta-and-vma" aria-label="Permalink to &quot;3.4.3. Vector Tail Agnostic and Vector Mask Agnostic vta and vma&quot;">​</a></h4><p>vta 用于指示 “tail elements” 的填充方法，vma 用于指示被 mask 元素的填充方法。分别用于在向量指令执行期间决定尾部元素和目标非活跃元素的行为。这两个参数在可以配置 vtype 的汇编指令 vset{i}vl{i} 中以特定符号标识。</p><ul><li>undisturbed：量寄存器组的相应目标元素将保留原值不变。</li><li>agnostic：目标操作数元素既可以保留原值也可以全部置1。</li></ul><blockquote><p>在有些处理器中，会采用寄存器重命名的技术，比如超标量流水线处理器，在undisturbed策略下，必须从旧的物理目标向量寄存器中读取元素值，才能复制到新的物理目标寄存器中；也可以说，在新的物理寄存器进行重命名时，需要根据重命名映射表，查到原有的映射关系，然后把其中的元素值读出来，写到重命名后的对应元素。这对于不需要这些非活跃元素和尾部元素值的之后的运算既降低了性能也增加了功耗。因此undisturbed策略就显得很不可观，此时按照agnostic策略进行运算比较好。</p></blockquote><blockquote><p>在v0.9之前，当这些标志没有在vsetvli上指定时，它们默认为掩码不受干扰/尾不受干扰。但是，不建议使用不带这些标志的vsetvli，现在必须指定标志设置。默认情况下可能应该是尾部不可知论/掩码不可知论，因此软件必须指定何时关心非参与元素，但考虑到引入这些标志之前指令的历史意义，决定在未来的汇编代码中总是需要它们。</p></blockquote><h4 id="_3-4-4-vector-type-illegal-vill" tabindex="-1">3.4.4. Vector Type Illegal vill <a class="header-anchor" href="#_3-4-4-vector-type-illegal-vill" aria-label="Permalink to &quot;3.4.4. Vector Type Illegal vill&quot;">​</a></h4><p>vill 位反映上一条的 vset{i}vl{i} 指令是不是合法的如果 vill 被置位了，后面再执行向量指令就会引起异常。</p><h3 id="_3-5-向量长度寄存器-vl" tabindex="-1">3.5. 向量长度寄存器 vl <a class="header-anchor" href="#_3-5-向量长度寄存器-vl" aria-label="Permalink to &quot;3.5. 向量长度寄存器 vl&quot;">​</a></h3><p>XLEN位宽的vl寄存器只能被一个带有返回值的vset{i}vl{i} 指令和仅故障优先索引负载指令更新。</p><p>vl寄存器保存着一个无符号整数，用于指定要用vector指令的结果更新的元素的数量，详见预启动、活动、非活动、主体和尾元素定义小节。</p><h3 id="_3-6-向量字节长度-vlenb" tabindex="-1">3.6. 向量字节长度 vlenb <a class="header-anchor" href="#_3-6-向量字节长度-vlenb" aria-label="Permalink to &quot;3.6. 向量字节长度 vlenb&quot;">​</a></h3><p>VLEN/8，用于计算向量的字节长度。</p><blockquote><p>如果没有这个CSR，需要几个指令来以字节计算VLEN，并且代码必须干扰当前的vl和vtype设置，这需要它们被保存和恢复。</p></blockquote><h3 id="_3-7-向量起始地址寄存器-vstart" tabindex="-1">3.7. 向量起始地址寄存器 vstart <a class="header-anchor" href="#_3-7-向量起始地址寄存器-vstart" aria-label="Permalink to &quot;3.7. 向量起始地址寄存器 vstart&quot;">​</a></h3><p>一条向量指令索要执行的第一个元素的索引，通常被用来记录发生trap时恢复的位置，其他用途见下文。任意一条向量指令执行时，vstart之前的向量将被忽略，<strong>该条向量执行结束后vstart被置0</strong>，所有向量指令包括vset{i}vl{i}执行结束后都会把该寄存器置零</p><blockquote><p>所有向量指令，包括vset{i}vl{i}，都会将vstart CSR重置为零。</p></blockquote><h3 id="_3-8-vector-fixed-point-rounding-mode-register-vxrm" tabindex="-1">3.8. Vector Fixed-Point Rounding Mode Register vxrm <a class="header-anchor" href="#_3-8-vector-fixed-point-rounding-mode-register-vxrm" aria-label="Permalink to &quot;3.8. Vector Fixed-Point Rounding Mode Register vxrm&quot;">​</a></h3><p>向量定点舍入模式寄存器的一些规则</p><h3 id="_3-9-vector-fixed-point-saturation-flag-vxsat" tabindex="-1">3.9. Vector Fixed-Point Saturation Flag vxsat <a class="header-anchor" href="#_3-9-vector-fixed-point-saturation-flag-vxsat" aria-label="Permalink to &quot;3.9. Vector Fixed-Point Saturation Flag vxsat&quot;">​</a></h3><h3 id="_3-10-vector-control-and-status-register-vcsr" tabindex="-1">3.10. Vector Control and Status Register vcsr <a class="header-anchor" href="#_3-10-vector-control-and-status-register-vcsr" aria-label="Permalink to &quot;3.10. Vector Control and Status Register vcsr&quot;">​</a></h3><h3 id="_3-11-state-of-vector-extension-at-reset" tabindex="-1">3.11. State of Vector Extension at Reset <a class="header-anchor" href="#_3-11-state-of-vector-extension-at-reset" aria-label="Permalink to &quot;3.11. State of Vector Extension at Reset&quot;">​</a></h3><h2 id="_6-配置指令-vsetvli-vsetivli-vsetvl" tabindex="-1">6. 配置指令(vsetvli/vsetivli/vsetvl) <a class="header-anchor" href="#_6-配置指令-vsetvli-vsetivli-vsetvl" aria-label="Permalink to &quot;6. 配置指令(vsetvli/vsetivli/vsetvl)&quot;">​</a></h2><p>处理大量元素的常见方法之一是“剥离挖掘”，其中循环的每次迭代都处理一定数量的元素，迭代一直持续到处理完所有元素。RISC-V矢量规范为这种方法提供了直接的、可移植的支持。应用程序指定要处理的元素总数(应用程序向量长度或AVL)作为vl的候选值，硬件根据微架构实现和vtype设置，通过通用寄存器响应每次迭代(存储在vl中)将处理的元素数量(通常更少)。在示例剥离和对SEW的更改中显示了一个简单的循环结构，描述了代码跟踪剩余元素数量和硬件每次迭代处理的数量的容易程度。</p><p>提供了一组指令，允许快速配置vl和vtype中的值，以匹配应用程序的需要。vset (i)vl(i)指令根据参数设置vtype和vl，并将vl的新值写入rd。</p><p><img src="https://s2.loli.net/2022/10/26/U8RzPKE13kiXM6A.webp" alt="image.5p8nn7zdzw00"></p><h3 id="_6-1-vtype-encoding" tabindex="-1">6.1. vtype encoding <a class="header-anchor" href="#_6-1-vtype-encoding" aria-label="Permalink to &quot;6.1. vtype encoding&quot;">​</a></h3><p><img src="https://s2.loli.net/2022/10/26/E875Mdl1OkuPZnm.webp" alt="image"></p><p>新的vtype设置编码在vsetvli和vsetivli的直接字段中，以及vsetvl的rs2寄存器中。</p><p>在vset指令中，vtype被完整载入，。在汇编中使用一些固定的字符表示特定的配置。</p><p><img src="https://s2.loli.net/2022/10/26/IZ8BqNuhpwyf6xF.webp" alt="image.25qycm6hylfk"></p><h3 id="_6-2-avl-encoding" tabindex="-1">6.2. AVL encoding <a class="header-anchor" href="#_6-2-avl-encoding" aria-label="Permalink to &quot;6.2. AVL encoding&quot;">​</a></h3><p>新的向量长度设置基于AVL, vsetvli和vsetvl的AVL编码在rs1和rd字段中，如下所示:</p><p><img src="https://s2.loli.net/2022/10/26/kvNwKxFlQtR3fd7.webp" alt="image.20g89b0wjmo0"></p><h3 id="_6-3-设置-vl-的规则" tabindex="-1">6.3. 设置 vl 的规则 <a class="header-anchor" href="#_6-3-设置-vl-的规则" aria-label="Permalink to &quot;6.3. 设置 vl 的规则&quot;">​</a></h3><p>vset{i}vl{i}指令首先根据vtype参数设置VLMAX，然后按照以下约束设置vl:</p><ol><li>vl = AVL 如果AVL ≤ VLMAX</li><li>ceil(AVL / 2) ≤ vl ≤ VLMAX 如果 AVL &lt; (2 * VLMAX)</li><li>vl = VLMAX if AVL ≥ (2 * VLMAX)</li><li>确定任何给定的实现相同的输入AVL和VLMAX值</li><li>这些特定的属性遵循之前的规则: <ol><li>vl = 0 if AVL = 0</li><li>vl &gt; 0 if AVL &gt; 0</li><li>vl ≤ VLMAX</li><li>vl ≤ AVL</li><li>从vl读取的值，当用作vset{i}vl{i}的AVL参数时，vl的结果是相同的值，只要结果VLMAX等于读取vl时VLMAX的值</li></ol></li></ol><blockquote><p>ceil(x):返回大于或等于 <strong>x</strong> 的最小的整数值。</p></blockquote><blockquote><p>vl设置规则设计得足够严格，以保护AVL VLMAX跨寄存器溢出和上下文交换的vl行为，但又足够灵活，使实现能够提高AVL &gt; VLMAX的矢量通道利用率。</p><p>例如，这允许在VLMAX &lt; AVL &lt; 2<em>VLMAX时设置vl = ceil(AVL / 2)，以便在一个露天矿循环的最后两个迭代中均匀分配工作。要求2确保缩减循环的第一次剥矿迭代使用所有迭代中最大的向量长度，即使在AVL &lt; 2</em>VLMAX的情况下。这允许软件避免需要显式地计算在条带化循环期间观察到的最大向量长度。需求2还允许实现在VLMAX &lt; AVL &lt; 2*VLMAX时将vl设置为VLMAX</p></blockquote><h3 id="_6-4-例子-stripmining-和-改变sew" tabindex="-1">6.4. 例子：stripmining 和 改变SEW <a class="header-anchor" href="#_6-4-例子-stripmining-和-改变sew" aria-label="Permalink to &quot;6.4. 例子：stripmining 和 改变SEW&quot;">​</a></h3><blockquote><p>SEW和LMUL设置可以动态更改，以在单个循环中提供混合宽度操作的高吞吐量。</p></blockquote><p><img src="https://s2.loli.net/2022/10/26/NS9JsCnyFWoRjA3.webp" alt="image.1nja5yhstkgw"></p><h2 id="_18-standard-vector-extensions" tabindex="-1"><strong>18. Standard Vector Extensions</strong> <a class="header-anchor" href="#_18-standard-vector-extensions" aria-label="Permalink to &quot;**18. Standard Vector Extensions**&quot;">​</a></h2>',67);function m(t,b,V,_,g,x){const l=o("Badge");return r(),s("div",null,[a("h1",p,[e(n(t.$frontmatter.title)+" ",1),d(l,{type:"tip",text:String(t.$frontmatter.date).slice(0,10)},null,8,["text"]),e(),h]),u])}const f=i(c,[["render",m]]);export{L as __pageData,f as default};
